// Fase 3: Concorr√™ncia (Single Choice)
const Phase3Handler = {
    score: 0,
    selectedOption: null,
    attempts: 0,
    completed: false,

    // Inicializar fase
    init() {
        this.score = 0;
        this.selectedOption = null;
        this.attempts = 0;
        this.completed = false;
        this.createPhaseInterface();
        GamePhases.updatePhaseScore(this.score);
    },

    // Criar interface da fase
    createPhaseInterface() {
        const gameArea = document.getElementById('phase-game-area');
        if (!gameArea) return;

        const phaseData = GameData.phases[3].data;
        
        gameArea.innerHTML = `
            <div class="phase3-container">
                <div class="instructions-panel">
                    <h3>üîÑ Gerenciamento de Concorr√™ncia</h3>
                    <p>${GameData.messages.phase3.instructions}</p>
                    <div class="concept-explanation">
                        <div class="concept-box">
                            <h4>‚ö†Ô∏è Concorr√™ncia</h4>
                            <p>Quando m√∫ltiplos processos tentam acessar o mesmo recurso simultaneamente, precisamos de mecanismos para evitar <strong>condi√ß√µes de corrida</strong> e garantir <strong>consist√™ncia de dados</strong>.</p>
                        </div>
                        <div class="scoring-info">
                            <span>‚úÖ Resposta correta: +${phaseData.scoring.correct} pontos</span>
                            <span>‚ùå Resposta errada: ${phaseData.scoring.wrong} pontos</span>
                        </div>
                    </div>
                </div>

                <div class="scenario-area">
                    <div class="scenario-box">
                        <h4>üéØ Cen√°rio:</h4>
                        <div class="scenario-visual">
                            <div class="user-icons">
                                <div class="user-icon">üë§ Usu√°rio A</div>
                                <div class="access-arrow">üìù</div>
                                <div class="shared-resource">üìÑ arquivo.txt</div>
                                <div class="access-arrow">üìù</div>
                                <div class="user-icon">üë§ Usu√°rio B</div>
                            </div>
                        </div>
                        <p class="scenario-description">${phaseData.scenario}</p>
                        <div class="problem-highlight">
                            <strong>Problema:</strong> Se ambos editarem simultaneamente, as altera√ß√µes podem se sobrepor e dados podem ser perdidos!
                        </div>
                    </div>
                </div>

                <div class="options-area">
                    <h4>Como voc√™ resolveria esta situa√ß√£o?</h4>
                    <div id="options-container" class="options-container">
                        ${this.generateOptionCards(phaseData.options)}
                    </div>
                </div>

                <div class="analysis-section">
                    <div class="selected-option-info" id="selected-option-info" style="display: none;">
                        <h4>Sua Escolha:</h4>
                        <div id="selected-option-detail"></div>
                    </div>

                    <div class="action-buttons">
                        <button id="check-answer-btn" class="primary-btn" onclick="Phase3Handler.checkAnswer()" disabled>
                            ‚úÖ Confirmar Resposta
                        </button>
                        <button id="show-hint-btn" class="secondary-btn" onclick="Phase3Handler.showHint()">
                            üí° Dica
                        </button>
                    </div>
                </div>

                <div class="feedback-area">
                    <div id="feedback-message" class="feedback-message"></div>
                    <div id="detailed-explanation" class="detailed-explanation" style="display: none;"></div>
                </div>
            </div>
        `;
    },

    // Gerar cards das op√ß√µes
    generateOptionCards(options) {
        return options.map(option => `
            <div class="option-card" data-option-id="${option.id}" onclick="Phase3Handler.selectOption('${option.id}')">
                <div class="option-header">
                    <div class="option-radio">
                        <input type="radio" name="concurrency-option" id="option-${option.id}" value="${option.id}">
                        <label for="option-${option.id}"></label>
                    </div>
                    <h4>${option.name}</h4>
                    <span class="option-indicator ${option.correct ? 'correct-solution' : 'problematic-solution'}" style="display: none;">
                        ${option.correct ? '‚úÖ' : '‚ö†Ô∏è'}
                    </span>
                </div>
                <p class="option-description">${option.description}</p>
                <div class="option-analysis">
                    <div class="consequences" style="display: none;">
                        <strong>Consequ√™ncias:</strong>
                        <span class="consequence-text">${this.getOptionConsequences(option)}</span>
                    </div>
                    <div class="implementation" style="display: none;">
                        <strong>Como implementar:</strong>
                        <span class="implementation-text">${this.getImplementationDetails(option)}</span>
                    </div>
                </div>
            </div>
        `).join('');
    },

    // Obter consequ√™ncias da op√ß√£o
    getOptionConsequences(option) {
        const consequences = {
            'aplicar-trava': 'Evita condi√ß√µes de corrida, garante consist√™ncia de dados. Pode reduzir performance em casos de alta concorr√™ncia.',
            'ignorar': 'Risco alto de corrup√ß√£o de dados, perda de altera√ß√µes, inconsist√™ncias. N√£o √© uma solu√ß√£o vi√°vel.',
            'espera': 'Funciona, mas n√£o √© otimizado. Um usu√°rio fica ocioso desnecessariamente, reduzindo efici√™ncia.'
        };
        return consequences[option.id] || 'Consequ√™ncias n√£o mapeadas';
    },

    // Obter detalhes de implementa√ß√£o
    getImplementationDetails(option) {
        const implementations = {
            'aplicar-trava': 'Usar mutex, sem√°foros ou locks de arquivo. Implementar timeout para evitar deadlocks.',
            'ignorar': 'N√£o implementar nenhum controle de concorr√™ncia (N√ÉO recomendado).',
            'espera': 'Sistema de filas ou controle manual de turnos. Menos eficiente que locks.'
        };
        return implementations[option.id] || 'Implementa√ß√£o n√£o mapeada';
    },

    // Selecionar op√ß√£o
    selectOption(optionId) {
        if (this.completed) return;

        // Remover sele√ß√£o anterior
        const optionCards = document.querySelectorAll('.option-card');
        optionCards.forEach(card => {
            card.classList.remove('selected');
        });

        // Marcar nova sele√ß√£o
        const selectedCard = document.querySelector(`.option-card[data-option-id="${optionId}"]`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
        }

        // Atualizar radio button
        const radioButton = document.getElementById(`option-${optionId}`);
        if (radioButton) {
            radioButton.checked = true;
        }

        this.selectedOption = optionId;
        this.updateSelectedOptionInfo();
        this.updateCheckButton();
    },

    // Atualizar informa√ß√µes da op√ß√£o selecionada
    updateSelectedOptionInfo() {
        const infoElement = document.getElementById('selected-option-info');
        const detailElement = document.getElementById('selected-option-detail');
        
        if (!infoElement || !detailElement || !this.selectedOption) return;

        const phaseData = GameData.phases[3].data;
        const selectedOptionData = phaseData.options.find(opt => opt.id === this.selectedOption);
        
        if (selectedOptionData) {
            detailElement.innerHTML = `
                <div class="selected-option-card">
                    <h5>${selectedOptionData.name}</h5>
                    <p>${selectedOptionData.description}</p>
                    <div class="preview-consequences">
                        <strong>Poss√≠veis consequ√™ncias:</strong>
                        <p>${this.getOptionConsequences(selectedOptionData)}</p>
                    </div>
                </div>
            `;
            infoElement.style.display = 'block';
        }
    },

    // Atualizar bot√£o de verifica√ß√£o
    updateCheckButton() {
        const checkButton = document.getElementById('check-answer-btn');
        if (checkButton) {
            checkButton.disabled = !this.selectedOption || this.completed;
        }
    },

    // Verificar resposta
    checkAnswer() {
        if (this.completed || !this.selectedOption) return;

        const phaseData = GameData.phases[3].data;
        const selectedOptionData = phaseData.options.find(opt => opt.id === this.selectedOption);
        
        this.attempts++;
        this.completed = true;

        if (selectedOptionData && selectedOptionData.correct) {
            // Resposta correta
            this.score = phaseData.scoring.correct;
            
            this.showFeedback(GameData.messages.phase3.completed, 'success');
            this.highlightCorrectAnswer();
            
            // Habilitar bot√£o de finalizar
            const completeButton = document.getElementById('complete-phase-btn');
            if (completeButton) {
                completeButton.disabled = false;
                completeButton.classList.add('pulse');
            }

        } else {
            // Resposta incorreta
            this.score = phaseData.scoring.wrong;
            
            this.showFeedback(
                `Resposta incorreta. A trava de acesso √© a melhor solu√ß√£o para evitar condi√ß√µes de corrida.`, 
                'error'
            );
            this.highlightWrongAnswer();
        }

        this.showDetailedExplanation();
        GamePhases.updatePhaseScore(this.score);
        this.updateCheckButton();
    },

    // Destacar resposta correta
    highlightCorrectAnswer() {
        const selectedCard = document.querySelector(`.option-card[data-option-id="${this.selectedOption}"]`);
        if (selectedCard) {
            selectedCard.classList.add('correct-answer');
            
            // Adicionar efeito especial
            setTimeout(() => {
                selectedCard.classList.add('sparkle-effect');
            }, 500);
        }

        // Mostrar indicadores
        this.showOptionIndicators();
    },

    // Destacar resposta errada
    highlightWrongAnswer() {
        const selectedCard = document.querySelector(`.option-card[data-option-id="${this.selectedOption}"]`);
        if (selectedCard) {
            selectedCard.classList.add('wrong-answer');
        }

        // Destacar a resposta correta
        const phaseData = GameData.phases[3].data;
        const correctOption = phaseData.options.find(opt => opt.correct);
        if (correctOption) {
            const correctCard = document.querySelector(`.option-card[data-option-id="${correctOption.id}"]`);
            if (correctCard) {
                correctCard.classList.add('should-be-selected');
            }
        }

        // Mostrar indicadores
        this.showOptionIndicators();
    },

    // Mostrar indicadores das op√ß√µes
    showOptionIndicators() {
        const indicators = document.querySelectorAll('.option-indicator');
        indicators.forEach(indicator => {
            indicator.style.display = 'inline';
        });
    },

    // Mostrar explica√ß√£o detalhada
    showDetailedExplanation() {
        const explanationElement = document.getElementById('detailed-explanation');
        if (!explanationElement) return;

        const phaseData = GameData.phases[3].data;
        
        let explanationHTML = `
            <h4>üìö Explica√ß√£o Completa:</h4>
            <div class="concurrency-explanation">
                <div class="problem-analysis">
                    <h5>üîç An√°lise do Problema:</h5>
                    <p>Quando dois ou mais processos tentam acessar o mesmo recurso simultaneamente, podem ocorrer:</p>
                    <ul>
                        <li><strong>Race Condition (Condi√ß√£o de Corrida):</strong> O resultado depende da ordem de execu√ß√£o</li>
                        <li><strong>Data Corruption (Corrup√ß√£o de Dados):</strong> Dados podem ser perdidos ou corrompidos</li>
                        <li><strong>Inconsistent State (Estado Inconsistente):</strong> O sistema fica em estado inv√°lido</li>
                    </ul>
                </div>

                <div class="solutions-analysis">
                    <h5>üí° An√°lise das Solu√ß√µes:</h5>
        `;

        phaseData.options.forEach(option => {
            const isSelected = option.id === this.selectedOption;
            const statusClass = option.correct ? 'correct-solution' : 'problematic-solution';
            
            explanationHTML += `
                <div class="solution-analysis ${statusClass} ${isSelected ? 'was-selected' : ''}">
                    <div class="solution-header">
                        <span class="solution-icon">${option.correct ? '‚úÖ' : '‚ùå'}</span>
                        <strong>${option.name}</strong>
                        ${isSelected ? '<span class="selected-badge">Sua escolha</span>' : ''}
                    </div>
                    <p><strong>Descri√ß√£o:</strong> ${option.description}</p>
                    <p><strong>Consequ√™ncias:</strong> ${this.getOptionConsequences(option)}</p>
                    <p><strong>Implementa√ß√£o:</strong> ${this.getImplementationDetails(option)}</p>
                </div>
            `;
        });

        explanationHTML += `
                </div>

                <div class="key-concepts">
                    <h5>üîë Conceitos Importantes:</h5>
                    <div class="concepts-grid">
                        <div class="concept-item">
                            <strong>Mutex (Mutual Exclusion):</strong>
                            <p>Garante que apenas um processo acesse o recurso por vez</p>
                        </div>
                        <div class="concept-item">
                            <strong>Deadlock:</strong>
                            <p>Situa√ß√£o onde processos ficam esperando uns aos outros indefinidamente</p>
                        </div>
                        <div class="concept-item">
                            <strong>Atomicidade:</strong>
                            <p>Opera√ß√£o que √© executada completamente ou n√£o √© executada</p>
                        </div>
                        <div class="concept-item">
                            <strong>Lock:</strong>
                            <p>Mecanismo que impede acesso simult√¢neo a um recurso</p>
                        </div>
                    </div>
                </div>

                <div class="best-practices">
                    <h5>üèÜ Melhores Pr√°ticas:</h5>
                    <ul>
                        <li>Sempre usar locks para recursos compartilhados</li>
                        <li>Implementar timeouts para evitar deadlocks</li>
                        <li>Minimizar o tempo que os locks s√£o mantidos</li>
                        <li>Usar transa√ß√µes para opera√ß√µes cr√≠ticas</li>
                        <li>Considerar alternativas como estruturas lock-free</li>
                    </ul>
                </div>
            </div>
        `;

        explanationElement.innerHTML = explanationHTML;
        explanationElement.style.display = 'block';
    },

    // Mostrar feedback
    showFeedback(message, type) {
        const feedbackElement = document.getElementById('feedback-message');
        if (feedbackElement) {
            feedbackElement.textContent = message;
            feedbackElement.className = `feedback-message ${type}`;
        }
    },

    // Mostrar dica
    showHint() {
        const hints = [
            "Pense no que acontece quando dois usu√°rios fazem altera√ß√µes no mesmo arquivo ao mesmo tempo",
            "A solu√ß√£o deve evitar que dados sejam perdidos ou corrompidos",
            "Controles de concorr√™ncia s√£o essenciais em sistemas multiusu√°rio",
            "A melhor solu√ß√£o garante integridade dos dados sem causar deadlocks"
        ];
        
        const randomHint = hints[Math.floor(Math.random() * hints.length)];
        GamePhases.showHint(randomHint, 5000);
        
        // Mostrar an√°lises detalhadas das op√ß√µes
        setTimeout(() => {
            this.toggleAnalysisVisibility();
        }, 1000);
    },

    // Alternar visibilidade das an√°lises
    toggleAnalysisVisibility() {
        const analyses = document.querySelectorAll('.option-analysis > div');
        const areVisible = analyses[0]?.style.display !== 'none';
        
        analyses.forEach(analysis => {
            analysis.style.display = areVisible ? 'none' : 'block';
        });
        
        const hintButton = document.getElementById('show-hint-btn');
        if (hintButton && !this.completed) {
            hintButton.textContent = areVisible ? 'üí° Dica' : 'üîç Ocultar An√°lise';
        }
    },

    // Resetar fase
    reset() {
        // Desmarcar op√ß√µes
        const radioButtons = document.querySelectorAll('input[name="concurrency-option"]');
        radioButtons.forEach(radio => {
            radio.checked = false;
        });

        // Remover classes visuais
        const optionCards = document.querySelectorAll('.option-card');
        optionCards.forEach(card => {
            card.className = 'option-card';
        });

        // Ocultar informa√ß√µes
        const infoElement = document.getElementById('selected-option-info');
        if (infoElement) {
            infoElement.style.display = 'none';
        }

        const explanationElement = document.getElementById('detailed-explanation');
        if (explanationElement) {
            explanationElement.style.display = 'none';
        }

        this.init();
    },

    // Verificar se h√° progresso
    hasProgress() {
        return this.selectedOption !== null;
    },

    // Obter pontua√ß√£o atual
    getScore() {
        return this.score;
    }
};

// Registrar handler da fase
GamePhases.registerPhaseHandler(3, Phase3Handler);

// Exportar para uso global
window.Phase3Handler = Phase3Handler;
